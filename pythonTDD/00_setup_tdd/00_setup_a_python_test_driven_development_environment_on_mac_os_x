# Create a Python Test Driven Development Environment on Mac OS X
#   default project name is testDrivenDevelopmentEnvironment

displayDirectory () {
    echo "\tcurrentDirectory: $PWD"
    ls -a
    reply "Press [Enter] key to continue..."
}

setupVirtualEnvironment () {
    python3 -m venv .venv
    displayDirectory
    source .venv/bin/activate
    pip install -U pip
    pip install sniffer macFSevents
}

getProjectName () {
    read -p "Enter the name of your project:" projectName
    [[ -z $projectName ]] && projectName="testDrivenDevelopmentEnvironment" || echo
    echo "\tprojectName: $projectName"
    read -p "Press [Enter] key to continue..."
}

createDirectoryStructure() {
    echo "\tCreating directory structure: $projectName/tests..."
    mkdir -p $projectName/tests
    cd $projectName
    displayDirectory
}

createBoilerPlateCode() {
    touch $projectName.py
    touch tests/__init__.py
    echo 'Current File/Directory Structure'
    tree
}

createFailingTest() {
    echo '\tCreating a failing python test...'
    cat << DELIMITER > tests/test_$projectName.py
from unittest import TestCase

class Test$projectName(TestCase):

    def test_failure(self):
        self.assertTrue(False)
DELIMITER
    cat tests/test_$projectName.py
}

clear
getProjectName
createDirectoryStructure
createBoilerPlateCode
createFailingTest
# touch $projectName.py
# touch tests/__init__.py


# setupVirtualEnvironment

# sniffer

# Note - sniffer fails because of an issue with nose
# replace the body of the run function .venv/lib/pythonX.X/site-packages/sniffer/runner.py with
# import subprocess
# if subproces.run('python -m unittest -f', shell=True).returncode != 0:
#     return False
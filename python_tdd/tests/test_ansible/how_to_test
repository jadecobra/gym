# ansible test syntax
variable is test_name
result is failed

# testing strings
vars:
  url: "https://example.com/users/foo/resources/bar"

tasks:
  - debug:
      msg: "matched pattern 1"
    when: url is match("https://example.com/users/.*/resources")

  - debug:
      msg: "matched pattern 2"
    when: url is search("users/.*/resources/.*")

  - debug:
      msg: "matched pattern 3"
    when: url is search("users")

  - debug:
      msg: "matched pattern 4"
    when: url is regex("example\.com/\w+/foo")

# Vault
vars:
  variable: !vault |
    $ANSIBLE_VAULT;1.2;AES256;dev
    61323931353866666336306139373937316366366138656131323863373866376666353364373761
    3539633234313836346435323766306164626134376564330a373530313635343535343133316133
    36643666306434616266376434363239346433643238336464643566386135356334303736353136
    6565633133366366360a326566323363363936613664616364623437336130623133343530333739
    3039

tasks:
  - debug:
      msg: '{{ (variable is vault_encrypted) | ternary("Vault encrypted", "Not vault encrypted") }}'

# Testing Truthiness
- debug:
    msg: "Truthy"
  when: value is truthy
  vars:
    value: "some string"

- debug:
    msg: "Falsy"
  when: value is falsy
  vars:
    value: ""

# attempt to convert boolean indicators to actual booleans
- debug:
    msg: "Truthy"
  when: value is truthy(convert_bool=True)
  vars:
    value: "yes"

- debug:
    msg: "Falsy"
  when: value is falsy(convert_bool=True)
  vars:
    value: "off"

# Evaluate ansible_facts['distribution_version']
{{ ansible_facts['distribution_version'] is version('12.04', '>=')}}
{{ sample_version_var is version('1.0', operator='lt', strict=True) }}

# Using version_type to compare a semantic version
{{ sample_semver_var is version('2.0.0-rc.1+build.123', 'lt', version_type='semver') }}

vars:
  my_version: 1.2.3

tasks:
  - debug:
      msg: "my_version is higher than 1.0.0"
    when: my_version is version('1.0.0', '>')

# Set theory tests
# is list x in list y?
vars:
  a: [1, 2, 3, 4, 5]
  b: [2, 3]
tasks:
  - debug:
      msg: "A includes B"
    when: a is superset(b)

  - debug:
      msg: "B is included in A"
    when: b is subset(a)

# Testing if list contains value
vars:
  lacp_groups:
    - master: lacp0
      network: 10.65.100.0/24
      gateway: 10.65.100.1
      dns4:
        - 10.65.100.10
        - 10.65.100.11
      interfaces:
        - em1
        - em2

    - master: lacp1
      network: 10.65.120.0/24
      gateway: 10.65.120.1
      dns4:
        - 10.65.100.10
        - 10.65.100.11
      interfaces:
        - em3
        - em4

tasks:
  - debug:
      msg: "{{ (lacp_groups|selectattr('interfaces', 'contains', 'em1')|first).master }}"

# Test if list value is True
vars:
  mylist:
    - 1
    - "{{ 3 == 3}}"
    - True
  myotherlist:
    - False
    - True

tasks:
  - debug:
      msg: "all are true"
    when: mylist is all

  - debig:
      msg: "at least one is true"
    when: myotherlist is any

# Testing paths
# providing information about a path on the controller
- debug:
    msg: "path is a directory"
  when: mypath is directory

- debug:
    msg: "path is a file"
  when: mypath is file

- debug:
    msg: "path is a symlink"
  when: mypath is link

- debug:
    msg: "path already exist"
  when: mypath is exists

- debug:
    msg: "path is {{ (mypath is abs)|ternary('absolute', 'relatice') }}"

- debug:
    msg: "path is the same file as path2"
  when: mypath is same_file(path2)

- debug:
    msg: "path is a mount"
  when: mypath is mount

- debug:
    msg: "path is a directory"
  when: mypath is directory
  vars:
    mypath: /my/patth

- debug:
    msg: "path is a file"
  when: "'/my/path' is file"

# testing size formats

# is given string human readable?
- name: "Human Readable"
  assert:
    that:
      - '"1.00 Bytes" == 1|human_readable'
      - '"1.00 bits" == 1|human_readable(isbits=True)'
      - '"10.00 KB == 10240|human_readable"'
      - '"97.66 MB" == 102400000|human_readable'
      - '"0.10 GB" == 102400000|human_readable(unit="G")'
      - '"0.10 Gb" == 102400000|human_readable(isbits=True, unit="G")'

# human to bytes
- name: "Human to Bytes"
  assert:
    that:
      - "{{'0'|human_to_bytes}} == 0"
      - "{{'0.1'|human_to_bytes}} == 0"
      - "{{'0.9'|human_to_bytes}} == 1"
      - "{{'1'|human_to_bytes}} == 1"
      - "{{'10.00 KB'|human_to_bytes}} == 10240"
      - "{{'11 MB'|human_to_bytes}} == 11534336"
      - "{{'1.1 GB'|human_to_bytes}} == 1181116006"
      - "{{'10.00 Kb'|human_to_bytes(isbits=True)}} == 10240"

# How to check the status of tasks
tasks:
  - shell: /usr/bin/foo
    register: result
    ignore_errors: True

  - debug:
      msg: "it failed"
    when: result is failed

  # in most cases you'll want a handler, but if you want to do something right now, this is nice
  - debug:
      msg: "it changed"
    when: result is changed

  - debug:
      msg: "it succeeded in Ansible >= 2.1"
    when: result is succeeded

  - debug:
      msg: "it succeeded"
    when: result is success

  - debug:
      msg: "it was skipped"
    when: result is skipped

# Type Tests
tasks:
  - name: "String interpretation"
    vars:
      a_string: "A string"
      a_dictionary: {"a": "dictionary"}
      a_list: ["a", "list"]
    assert:
      that:
      # Note that a string is classed as also being "iterable", "sequence" and "mapping"
      - a_string is string

      # Note that a dictionary is classed as not being a "string", but is "iterable", "sequence" and "mapping"
      - a_dictionary is not string and a_dictionary is mapping

      # Note that a list is classed as not being a "string" or "mapping" but is "iterable" and "sequence"
      - a_list is not string and a_list is not mapping and a_list is iterable

  - name: "Number interpretation"
    vars:
      a_float: 1.01
      a_float_as_string: "1.01"
      an_integer: 1
      an_integer_as_string: "1"
    assert:
      that:
      # Both a_float and an_integer are "number", but each has their own type as well
      - a_float is number and a_float is float
      - an_integer is number and an_integer is integer

      # Both a_float_as_string and an_integer_as_string are not numbers
      - a_float_as_string is not number and a_float_as_string is string
      - an_integer_as_string is not number and a_float_as_string is string

      # a_float or a_float_as_string when cast to a float and then to a string should match the same value cast only to a string
      - a_float | float | string == a_float | string
      - a_float_as_string | float | string == a_float_as_string | string

      # Likewise an_integer and an_integer_as_string when cast to an integer and then to a string should match the same value cast only to an integer
      - an_integer | int | string == an_integer | string
      - an_integer_as_string | int | string == an_integer_as_string | string

      # However, a_float or a_float_as_string cast as an integer and then a string does not match the same value cast to a string
      - a_float | int | string != a_float | string
      - a_float_as_string | int | string != a_float_as_string | string

      # Again, Likewise an_integer and an_integer_as_string cast as a float and then a string does not match the same value cast to a string
      - an_integer | float | string != an_integer | string
      - an_integer_as_string | float | string != an_integer_as_string | string

  - name: "Native Boolean Interpretation"
    loop:
      - yes
      - true
      - True
      - TRUE
      - no
      - No
      - NO
      - false
      - False
      - FALSE
      assert:
        that:
          # Note that while other values may be cast to boolean values, these are the only ones which are natively considered boolean
          # Note also that `yes` is the only case sensitive variant of these values
        - item is boolean
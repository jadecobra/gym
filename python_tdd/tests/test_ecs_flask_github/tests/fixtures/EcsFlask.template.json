{
  "Parameters": {
    "githubUserName": {
      "Type": "String",
      "Description": "Github username for source code repository"
    },
    "githubRespository": {
      "Type": "String",
      "Default": "amazon-ecs-fargate-cdk-v2-cicd",
      "Description": "Github source code repository"
    },
    "githubPersonalTokenSecretName": {
      "Type": "String",
      "Default": "/aws-samples/amazon-ecs-fargate-cdk-v2-cicd/github/personal_access_token",
      "Description": "The name of the AWS Secrets Manager Secret which holds the GitHub Personal Access Token for self project."
    },
    "BootstrapVersion": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
    }
  },
  "Resources": {
    "EcrRepository4D7B3EE1": {
      "Type": "AWS::ECR::Repository",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain"
    },
    "ClusterAdminRole047D4FCA": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":root"
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "Vpc8378EB38": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "EcsFlask/Vpc"
          }
        ]
      }
    },
    "VpcPublicSubnet1Subnet5C2D37C4": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "EcsFlask/Vpc/PublicSubnet1"
          }
        ]
      }
    },
    "VpcPublicSubnet1RouteTable6C95E38E": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "EcsFlask/Vpc/PublicSubnet1"
          }
        ]
      }
    },
    "VpcPublicSubnet1RouteTableAssociation97140677": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
        }
      }
    },
    "VpcPublicSubnet1DefaultRoute3DA9E72A": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C"
        }
      },
      "DependsOn": ["VpcVPCGWBF912B6E"]
    },
    "VpcPublicSubnet1EIPD7E02669": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "EcsFlask/Vpc/PublicSubnet1"
          }
        ]
      }
    },
    "VpcPublicSubnet1NATGateway4D7517AA": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "SubnetId": {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
        },
        "AllocationId": {
          "Fn::GetAtt": ["VpcPublicSubnet1EIPD7E02669", "AllocationId"]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "EcsFlask/Vpc/PublicSubnet1"
          }
        ]
      },
      "DependsOn": [
        "VpcPublicSubnet1DefaultRoute3DA9E72A",
        "VpcPublicSubnet1RouteTableAssociation97140677"
      ]
    },
    "VpcPublicSubnet2Subnet691E08A3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public"
          },
          {
            "Key": "Name",
            "Value": "EcsFlask/Vpc/PublicSubnet2"
          }
        ]
      }
    },
    "VpcPublicSubnet2RouteTable94F7E489": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "EcsFlask/Vpc/PublicSubnet2"
          }
        ]
      }
    },
    "VpcPublicSubnet2RouteTableAssociationDD5762D8": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489"
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet2Subnet691E08A3"
        }
      }
    },
    "VpcPublicSubnet2DefaultRoute97F91067": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C"
        }
      },
      "DependsOn": ["VpcVPCGWBF912B6E"]
    },
    "VpcPrivateSubnet1Subnet536B997A": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "EcsFlask/Vpc/PrivateSubnet1"
          }
        ]
      }
    },
    "VpcPrivateSubnet1RouteTableB2C5B500": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "EcsFlask/Vpc/PrivateSubnet1"
          }
        ]
      }
    },
    "VpcPrivateSubnet1RouteTableAssociation70C59FA6": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500"
        },
        "SubnetId": {
          "Ref": "VpcPrivateSubnet1Subnet536B997A"
        }
      }
    },
    "VpcPrivateSubnet1DefaultRouteBE02A9ED": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcPublicSubnet1NATGateway4D7517AA"
        }
      }
    },
    "VpcPrivateSubnet2Subnet3788AAA1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private"
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private"
          },
          {
            "Key": "Name",
            "Value": "EcsFlask/Vpc/PrivateSubnet2"
          }
        ]
      }
    },
    "VpcPrivateSubnet2RouteTableA678073B": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "EcsFlask/Vpc/PrivateSubnet2"
          }
        ]
      }
    },
    "VpcPrivateSubnet2RouteTableAssociationA89CAD56": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B"
        },
        "SubnetId": {
          "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
        }
      }
    },
    "VpcPrivateSubnet2DefaultRoute060D2087": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcPublicSubnet1NATGateway4D7517AA"
        }
      }
    },
    "VpcIGWD7BA715C": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "EcsFlask/Vpc"
          }
        ]
      }
    },
    "VpcVPCGWBF912B6E": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc8378EB38"
        },
        "InternetGatewayId": {
          "Ref": "VpcIGWD7BA715C"
        }
      }
    },
    "ClusterEB0386A7": {
      "Type": "AWS::ECS::Cluster"
    },
    "ecstaskroleEcsFlaskDD5607E6": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "RoleName": "ecs-taskrole-EcsFlask"
      }
    },
    "TaskDefinitionB36D86D9": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "Cpu": 256,
            "Essential": true,
            "Image": "public.ecr.aws/amazonlinux/amazonlinux:2022",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "TaskDefinitionflaskappLogGroupA03BF2AB"
                },
                "awslogs-stream-prefix": "ecs-logs",
                "awslogs-region": {
                  "Ref": "AWS::Region"
                }
              }
            },
            "Memory": 256,
            "Name": "flask-app",
            "PortMappings": [
              {
                "ContainerPort": 5000,
                "Protocol": "tcp"
              }
            ]
          }
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": ["TaskDefinitionExecutionRole8D61C2FB", "Arn"]
        },
        "Family": "EcsFlaskTaskDefinitionB12E6F26",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": ["FARGATE"],
        "TaskRoleArn": {
          "Fn::GetAtt": ["ecstaskroleEcsFlaskDD5607E6", "Arn"]
        }
      }
    },
    "TaskDefinitionExecutionRole8D61C2FB": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "TaskDefinitionExecutionRoleDefaultPolicy1F3406F5": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:batchchecklayeravailability",
                "ecr:batchgetimage",
                "ecr:getauthorizationtoken",
                "ecr:getdownloadurlforlayer",
                "logs:createlogstream",
                "logs:putlogevents"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": ["logs:CreateLogStream", "logs:PutLogEvents"],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": ["TaskDefinitionflaskappLogGroupA03BF2AB", "Arn"]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "TaskDefinitionExecutionRoleDefaultPolicy1F3406F5",
        "Roles": [
          {
            "Ref": "TaskDefinitionExecutionRole8D61C2FB"
          }
        ]
      }
    },
    "TaskDefinitionflaskappLogGroupA03BF2AB": {
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain"
    },
    "FargateServiceLBB353E155": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "LoadBalancerAttributes": [
          {
            "Key": "deletion_protection.enabled",
            "Value": "false"
          }
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": [
          {
            "Fn::GetAtt": ["FargateServiceLBSecurityGroup5F444C78", "GroupId"]
          }
        ],
        "Subnets": [
          {
            "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
          },
          {
            "Ref": "VpcPublicSubnet2Subnet691E08A3"
          }
        ],
        "Type": "application"
      },
      "DependsOn": [
        "VpcPublicSubnet1DefaultRoute3DA9E72A",
        "VpcPublicSubnet1RouteTableAssociation97140677",
        "VpcPublicSubnet2DefaultRoute97F91067",
        "VpcPublicSubnet2RouteTableAssociationDD5762D8"
      ]
    },
    "FargateServiceLBSecurityGroup5F444C78": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Automatically created Security Group for ELB EcsFlaskFargateServiceLB937AF974",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      }
    },
    "FargateServiceLBSecurityGrouptoEcsFlaskFargateServiceSecurityGroup87DB2B735000A7814039": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": ["FargateServiceLBSecurityGroup5F444C78", "GroupId"]
        },
        "IpProtocol": "tcp",
        "Description": "Load balancer to target",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": ["FargateServiceSecurityGroup262B61DD", "GroupId"]
        },
        "FromPort": 5000,
        "ToPort": 5000
      }
    },
    "FargateServiceLBPublicListener4B4929CA": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "FargateServiceLBPublicListenerECSGroupBE57E081"
            },
            "Type": "forward"
          }
        ],
        "LoadBalancerArn": {
          "Ref": "FargateServiceLBB353E155"
        },
        "Port": 80,
        "Protocol": "HTTP"
      }
    },
    "FargateServiceLBPublicListenerECSGroupBE57E081": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Port": 80,
        "Protocol": "HTTP",
        "TargetGroupAttributes": [
          {
            "Key": "stickiness.enabled",
            "Value": "false"
          }
        ],
        "TargetType": "ip",
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      }
    },
    "FargateServiceECC8084D": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Ref": "ClusterEB0386A7"
        },
        "DeploymentConfiguration": {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50
        },
        "DesiredCount": 1,
        "EnableECSManagedTags": false,
        "HealthCheckGracePeriodSeconds": 60,
        "LaunchType": "FARGATE",
        "LoadBalancers": [
          {
            "ContainerName": "flask-app",
            "ContainerPort": 5000,
            "TargetGroupArn": {
              "Ref": "FargateServiceLBPublicListenerECSGroupBE57E081"
            }
          }
        ],
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": [
              {
                "Fn::GetAtt": [
                  "FargateServiceSecurityGroup262B61DD",
                  "GroupId"
                ]
              }
            ],
            "Subnets": [
              {
                "Ref": "VpcPrivateSubnet1Subnet536B997A"
              },
              {
                "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
              }
            ]
          }
        },
        "TaskDefinition": {
          "Ref": "TaskDefinitionB36D86D9"
        }
      },
      "DependsOn": [
        "FargateServiceLBPublicListenerECSGroupBE57E081",
        "FargateServiceLBPublicListener4B4929CA"
      ]
    },
    "FargateServiceSecurityGroup262B61DD": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "EcsFlask/FargateService/Service/SecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38"
        }
      }
    },
    "FargateServiceSecurityGroupfromEcsFlaskFargateServiceLBSecurityGroupA4FA68735000E3820014": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "tcp",
        "Description": "Load balancer to target",
        "FromPort": 5000,
        "GroupId": {
          "Fn::GetAtt": ["FargateServiceSecurityGroup262B61DD", "GroupId"]
        },
        "SourceSecurityGroupId": {
          "Fn::GetAtt": ["FargateServiceLBSecurityGroup5F444C78", "GroupId"]
        },
        "ToPort": 5000
      }
    },
    "FargateServiceTaskCountTarget294B63AC": {
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
      "Properties": {
        "MaxCapacity": 6,
        "MinCapacity": 1,
        "ResourceId": {
          "Fn::Join": [
            "",
            [
              "service/",
              {
                "Ref": "ClusterEB0386A7"
              },
              "/",
              {
                "Fn::GetAtt": ["FargateServiceECC8084D", "Name"]
              }
            ]
          ]
        },
        "RoleARN": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":iam::",
              {
                "Ref": "AWS::AccountId"
              },
              ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
            ]
          ]
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs"
      }
    },
    "FargateServiceTaskCountTargetCpuScalingAEE9D78C": {
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
      "Properties": {
        "PolicyName": "EcsFlaskFargateServiceTaskCountTargetCpuScaling1B0C66D5",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": {
          "Ref": "FargateServiceTaskCountTarget294B63AC"
        },
        "TargetTrackingScalingPolicyConfiguration": {
          "PredefinedMetricSpecification": {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
          },
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "TargetValue": 10
        }
      }
    },
    "GitHubActionRolePolicy5BCC6410": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:BatchGetImage",
                "ecr:CompleteLayerUpload",
                "ecr:GetDownloadUrlForLayer",
                "ecr:InitiateLayerUpload",
                "ecr:PutImage",
                "ecr:UploadLayerPart"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": ["EcrRepository4D7B3EE1", "Arn"]
              }
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "ecr:batchchecklayeravailability",
                "ecr:batchgetimage",
                "ecr:getauthorizationtoken",
                "ecr:getdownloadurlforlayer",
                "ecs:describecluster"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": ["ClusterEB0386A7", "Arn"]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "GitHubActionRolePolicy5BCC6410",
        "Roles": [
          {
            "Fn::Select": [
              1,
              {
                "Fn::Split": [
                  "/",
                  {
                    "Fn::Select": [
                      5,
                      {
                        "Fn::Split": [
                          ":",
                          {
                            "Fn::ImportValue": "GitHubActionRole:ExportsOutputFnGetAttgithubactionrolegithubactionroleCE31B2CBArn55D6DE8A"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    }
  },
  "Outputs": {
    "FargateServiceLoadBalancerDNS9433D5F6": {
      "Value": {
        "Fn::GetAtt": ["FargateServiceLBB353E155", "DNSName"]
      }
    },
    "FargateServiceServiceURL47701F45": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": ["FargateServiceLBB353E155", "DNSName"]
            }
          ]
        ]
      }
    },
    "image": {
      "Value": {
        "Fn::Join": [
          "",
          [
            {
              "Fn::Select": [
                4,
                {
                  "Fn::Split": [
                    ":",
                    {
                      "Fn::GetAtt": ["EcrRepository4D7B3EE1", "Arn"]
                    }
                  ]
                }
              ]
            },
            ".dkr.ecr.",
            {
              "Fn::Select": [
                3,
                {
                  "Fn::Split": [
                    ":",
                    {
                      "Fn::GetAtt": ["EcrRepository4D7B3EE1", "Arn"]
                    }
                  ]
                }
              ]
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/",
            {
              "Ref": "EcrRepository4D7B3EE1"
            },
            ":latest"
          ]
        ]
      }
    },
    "loadbalancerdns": {
      "Value": {
        "Fn::GetAtt": ["FargateServiceLBB353E155", "DNSName"]
      }
    }
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  ["1", "2", "3", "4", "5"],
                  {
                    "Ref": "BootstrapVersion"
                  }
                ]
              }
            ]
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
        }
      ]
    }
  }
}
